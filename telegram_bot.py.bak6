import os
import time
import sqlite3
import logging
import requests
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# Configurar logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Carregar vari√°veis do .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
PAGSEGURO_EMAIL = "rafaelgoncalvessantos2020@gmail.com"
PAGSEGURO_TOKEN = "6F34E887A0A440E6944776FD7688ACFF"
PHOTO_PRICE = 25.0

# Inicializar application globalmente
application = None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Inicia o bot e envia mensagem de boas-vindas."""
    await update.message.reply_text(
        "Oi! Bem-vindo ao bot de fotos! üì∏ Envie uma foto facial pra come√ßar."
    )
    logger.info(f"Usu√°rio {update.effective_user.id} iniciou o bot.")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Recebe a foto e oferece op√ß√µes."""
    user_id = update.effective_user.id
    photo = update.message.photo[-1]
    
    # Salvar foto temporariamente
    file = await photo.get_file()
    file_path = f"photos/{user_id}_{int(time.time())}.jpg"
    await file.download_to_drive(file_path)
    
    # Criar bot√µes
    keyboard = [
        [
            InlineKeyboardButton("FOTO1", callback_data="FOTO1"),
            InlineKeyboardButton("FOTO2", callback_data="FOTO2"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "Foto recebida! Escolha uma op√ß√£o:", reply_markup=reply_markup
    )
    logger.info(f"Foto recebida do usu√°rio {user_id}.")

async def choose_option(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Gera cobran√ßa PIX e agenda verifica√ß√£o."""
    global application
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    option = query.data
    
    # Criar payload pra API do PagSeguro
    payload = {
        "reference_id": f"order_{user_id}_{int(time.time())}",
        "customer": {
            "name": "Teste",
            "email": "teste@pagseguro.com.br",
            "tax_id": "98765432100",
            "phones": [
                {
                    "country": "55",
                    "area": "11",
                    "number": "999999999",
                    "type": "MOBILE"
                }
            ]
        },
        "items": [
            {
                "name": f"Foto {option}",
                "quantity": 1,
                "unit_amount": int(PHOTO_PRICE * 100)
            }
        ],
        "qr_codes": [
            {
                "amount": {
                    "value": int(PHOTO_PRICE * 100)
                },
                "expiration_date": time.strftime(
                    "%Y-%m-%dT%H:%M:%S-03:00", time.localtime(time.time() + 3600)
                )
            }
        ],
        "notification_urls": ["https://example.com/notify"]
    }
    
    try:
        # Chamar API do PagSeguro
        response = requests.post(
            "https://sandbox.api.pagseguro.com/orders",
            headers={
                "Authorization": f"Bearer {PAGSEGURO_TOKEN}",
                "Content-Type": "application/json",
                "x-api-version": "4.0",
                "x-sandbox-token": PAGSEGURO_TOKEN
            },
            json=payload
        )
        response.raise_for_status()
        data = response.json()
        qr_code = data["qr_codes"][0]["text"]
        order_id = data["id"]
        
        # Salvar no banco
        with sqlite3.connect("users.db") as conn:
            conn.execute(
                "INSERT INTO orders (user_id, option, order_id, status) VALUES (?, ?, ?, ?)",
                (user_id, option, order_id, "PENDING")
            )
            conn.commit()
        
        # Enviar QR code
        await query.message.reply_text(
            f"Voc√™ escolheu {option}! Pague R$25.00 via PIX escaneando este QR code.\n\n"
            f"Chave PIX (copia e cola):\n{qr_code}\n\n"
            f"Aguarde a confirma√ß√£o do pagamento (at√© 5 minutos). Quando confirmado, voc√™ recebe a foto! üòä"
        )
        logger.info(f"Cobran√ßa PIX criada para usu√°rio {user_id}, order_id: {order_id}")
        
        # Agendar verifica√ß√£o
        if application and application.job_queue:
            application.job_queue.run_repeating(
                check_payment_status, interval=60, first=10, data=user_id
            )
        else:
            logger.error("Application ou job_queue n√£o inicializado!")
            await query.message.reply_text("Erro interno no bot. Tente novamente ou use /ajuda.")
            return
    
    except requests.RequestException as e:
        logger.error(f"Erro ao criar cobran√ßa PIX: {e}")
        await query.message.reply_text(f"Ops, erro ao gerar o PIX: {e}. Tenta de novo ou usa /ajuda.")

async def check_payment_status(context: ContextTypes.DEFAULT_TYPE):
    """Verifica o status do pagamento."""
    user_id = context.job.data
    with sqlite3.connect("users.db") as conn:
        cursor = conn.execute(
            "SELECT order_id, option FROM orders WHERE user_id = ? AND status = ?",
            (user_id, "PENDING")
        )
        orders = cursor.fetchall()
    
    for order_id, option in orders:
        try:
            response = requests.get(
                f"https://sandbox.api.pagseguro.com/orders/{order_id}",
                headers={
                    "Authorization": f"Bearer {PAGSEGURO_TOKEN}",
                    "Content-Type": "application/json",
                    "x-api-version": "4.0",
                    "x-sandbox-token": PAGSEGURO_TOKEN
                }
            )
            response.raise_for_status()
            data = response.json()
            status = data.get("charges", [{}])[0].get("status")
            
            if status == "PAID":
                photo_path = "123456789.jpg" if option == "FOTO1" else "987654321.jpg"
                with sqlite3.connect("users.db") as conn:
                    conn.execute(
                        "UPDATE orders SET status = ? WHERE order_id = ?",
                        ("PAID", order_id)
                    )
                    conn.commit()
                
                with open(photo_path, "rb") as photo:
                    await context.bot.send_photo(
                        chat_id=user_id,
                        photo=photo,
                        caption=f"Aqui est√° sua {option}! üòä"
                    )
                logger.info(f"Pagamento confirmado para usu√°rio {user_id}, foto {option} enviada.")
        
        except requests.RequestException as e:
            logger.error(f"Erro ao verificar pagamento {order_id}: {e}")

def init_db():
    """Inicializa o banco de dados."""
    with sqlite3.connect("users.db") as conn:
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS orders (
                user_id INTEGER,
                option TEXT,
                order_id TEXT,
                status TEXT
            )
            """
        )
        conn.commit()
    logger.info("Banco de dados inicializado.")

async def main():
    """Fun√ß√£o principal do bot."""
    global application
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN n√£o configurado!")
        return
    
    # Inicializar application
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Adicionar handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(CallbackQueryHandler(choose_option))
    
    # Inicializar banco
    init_db()
    
    # Iniciar bot
    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    
    logger.info("Bot iniciado e prontinho pra conversar no Telegram...")

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())